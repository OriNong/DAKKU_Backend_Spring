<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.re.kh.mapper.FriendshipMapper">
    <!-- 친구 관계 저장 -->
    <insert id="saveFriendship" parameterType="FriendshipVO">
        MERGE INTO FRIEND_SHIP F
            USING DUAL
            ON (F.USER_ID = #{userId} AND F.FRIEND_ID = #{friendId})
            WHEN MATCHED THEN
                UPDATE SET
                    F.STATUS = #{status},
                    F.IS_FROM = #{isFrom}
            WHEN NOT MATCHED THEN
                INSERT (
                        USER_ID,
                        FRIEND_ID,
                        STATUS,
                        IS_FROM
                    ) VALUES (
                                 #{userId},
                                 #{friendId},
                                 #{status},
                                 #{isFrom}
                             )
    </insert>
    
    <!-- 친구 관계 저장 후 생성된 친구 관계의 고유 id 조회 -->
    <select id="selectFriendshipID" resultType="Long">
        SELECT ID
        FROM FRIEND_SHIP
        WHERE USER_ID = #{userId} AND FRIEND_ID = #{friendId}
    </select>

    <!-- 친구 관계 저장 후 상호 REQUESTED_ID 각자의 ID로 설정 -->
    <update id="setRequestedIds">
        UPDATE FRIEND_SHIP
        SET REQUESTED_ID =
                CASE
                    WHEN ID = #{fromId} THEN #{toId}
                    WHEN ID = #{toId} THEN #{fromId}
                    END
        WHERE ID IN (#{fromId}, #{toId})
    </update>

    <!-- User의 친구 관계 목록 조회 -->
    <select id="findFriendshipListByUserId" parameterType="long" resultType="FriendshipVO">
        SELECT
            ID as id,
            USER_ID as userId,
            FRIEND_ID as friendId,
            STATUS as status,
            IS_FROM as isFrom,
            REQUESTED_ID as requestedId
        FROM FRIEND_SHIP
        WHERE USER_ID = #{userId}
    </select>

    <!-- 수락 대기 중인 친구 관계 목록 조회 -->
    <select id="findFriendshipById" parameterType="long" resultType="FriendshipVO">
        SELECT
            ID as id,
            USER_ID as userId,
            FRIEND_ID as friendId,
            STATUS as status,
            IS_FROM as isFrom,
            REQUESTED_ID as requestedId
        FROM FRIEND_SHIP
        WHERE ID = #{friendshipId}
    </select>

    <!-- 친구 요청 수락 및 거절 시 상태 변경 -->
    <update id="changeFriendshipStatus" parameterType="FriendshipVO">
        UPDATE FRIEND_SHIP
            SET STATUS = #{status}
        WHERE USER_ID = #{userId} AND FRIEND_ID = #{friendId}
    </update>

    <!-- User의 친구 목록 조회 -->
    <select id="getFriendshipList" parameterType="long" resultType="String">
        SELECT u.USERNAME
        FROM FRIEND_SHIP f
        JOIN USERS u ON f.FRIEND_ID = u.USER_ID
        WHERE f.USER_ID = #{userId}
        AND f.STATUS = 'ACCEPT'
    </select>

</mapper>